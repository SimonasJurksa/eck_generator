<?php

/**
 * @file eck_generate.module
 * TODO: Enter file description here.
 */

/**
 * Implements hook_permission().
 */
function eck_generate_permission() {
  $permissions = array();

  $permissions['generate_eck_content'] = array(
    'title' => t('TODO: enter permission title'),
    'description' => t('TODO: enter permission description'),
  );
  $permissions['administer eck_generate'] = array(
    'title' => t('TODO: enter permission title'),
    'description' => t('TODO: enter permission description'),
  );
  return $permissions;
}

/**
 * Implementation of hook_menu().
 */
function eck_generate_menu() {
  $items = array();

  $items['admin/config/development/generate/entity'] = array(
    'title' => 'Generate entities',
    'description' => 'Generate a given number of entities. Optionally delete current entities.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('eck_generate_entities_form'),
    'access arguments' => array('administer commerce_product entities'),
  );
  $items['admin/config/development/generate/order'] = array(
    'title' => 'Generate orders',
    'description' => 'Generate a given number of orders.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('eck_generate_orders_form'),
    'access arguments' => array('administer orders'),
  );

  return $items;
}

/**
 *
 * @return boolean
 */
function eck_generate_entities_form() {
  $suffix = '';
  $form = array();
  $form['bundles'] = array(
    '#type' => 'fieldset',
    '#title' => t('Entities: '),
  );
  foreach (EntityType::loadAll() as $entity_type) {
    /* @var $entity_type EntityType */
    $bundles = Bundle::loadByEntityType($entity_type);
    if (!empty($bundles)) {
      $options = array();
      foreach ($bundles as $bundle_mname => $bundle_obj) {
        /* @var $bundle_obj Bundle */
        $options[] = $bundle_obj->label . '(' . $bundle_obj->machine_name . ')';
      }

      $form['bundles'][$entity_type->label] = array(
        '#type' => 'checkboxes',
        '#options' => drupal_map_assoc($options),
        '#title' => $entity_type->label,
              //'#default_value' => array_keys($options),
      );
    }
  }

  $form['kill_entities'] = array(
    '#type' => 'checkbox',
    '#title' => t('<strong>Delete all entities</strong> in these product types before generating new entities.'),
    '#default_value' => FALSE,
  );
  if (isset($node_bundle)) {
    $form['generate_product_displays'] = array(
      '#type' => 'checkbox',
      '#title' => t('Generate product displays associated.'),
      '#default_value' => FALSE,
    );
    $form['node_types'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Content types'),
      '#options' => $node_bundles,
      '#states' => array(
        'invisible' => array(
          'input[name="generate_product_displays"]' => array('checked' => FALSE),
        ),
      ),
      '#default_value' => array_keys($node_bundles),
    );
  }
  $form['num_entities'] = array(
    '#type' => 'textfield',
    '#title' => t('How many entities would you like to generate?'),
    '#default_value' => 50,
    '#size' => 10,
  );

  $form['title_length'] = array(
    '#type' => 'textfield',
    '#title' => t('Max word length of titles'),
    '#default_value' => 4,
    '#size' => 10,
  );

  unset($options);
  $options[LANGUAGE_NONE] = t('Language neutral');
  if (module_exists('locale')) {
    $options += locale_language_list();
  }
  $form['add_language'] = array(
    '#type' => 'select',
    '#title' => t('Set language on entities'),
    '#multiple' => TRUE,
    '#disabled' => !module_exists('locale'),
    '#description' => t('Requires locale.module'),
    '#options' => $options,
    '#default_value' => array(LANGUAGE_NONE => LANGUAGE_NONE),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Generate'),
  );
  $form['#redirect'] = FALSE;

  return $form;
}

/**
 * Validate function for the integer fields.
 */
function _eck_generate_price_validate($element, &$form_state) {
  dpm($form_state['values'], 'values');
  form_error($element, t('The "!name" field has to be numeric.', array('!name' => t($element['#title']))));
  if (!ctype_digit($element['#value'])) {
    form_error($element, t('The "!name" field has to be numeric.', array('!name' => t($element['#title']))));
  }
}

/**
 * Submit function of eck_generate_entities_form
 */
function eck_generate_entities_form_submit($form, &$form_state) {
  module_load_include('inc', 'eck_generate', 'devel_generate');
  module_load_include('inc', 'eck_generate', 'includes/eck_generate.controller');
  $bundles = _eck_generate_get_bundles($form_state);
  dpm($bundles, 'bundlesssssssss');

  $form_state['values']['bundle_types'] = array_filter($bundles);

  if ($form_state['values']['num_entities'] <= 50) {
    eck_generate_entities($form_state);
  } else {
    module_load_include('inc', 'eck_generate', 'devel_generate_batch');
    eck_generate_batch_entities($form_state);
  }
}

/**
 * Pre-process the devel_generate_content_form request.  This is needed so
 * batch api can get the list of users once.
 *
 * @param $num
 *   array of options obtained from devel_generate_entities_form.
 */
function eck_generate_entities_pre_bundles(&$results) {
  module_load_include('inc', 'devel_generate');
  // Get user id.
  $users = devel_get_users();
  $users = array_merge($users, array('0'));
  $results['users'] = $users;
}
